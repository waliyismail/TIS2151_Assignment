CREATE TABLE USER_FORUM(
    USER_FORUM_ID VARCHAR(45),
    USER_FORUM_NAME VARCHAR(45),
    USER_FORUM_PASSWORD VARCHAR(45),
    USER_FORUM_EMAIL VARCHAR(45),
    USER_FORUM_IMAGE VARCHAR(100),
    USER_FORUM_ABOUT TEXT,
    PRIMARY KEY(USER_FORUM_ID)
);

CREATE TABLE ADMIN(
    ADMIN_ID VARCHAR(45),
    ADMIN_NAME VARCHAR(45),
    ADMIN_PASSWORD VARCHAR(45),
    ADMIN_IMAGE VARCHAR(45),
    PRIMARY KEY(ADMIN_ID)
);

CREATE TABLE FORUM( 
    FORUM_ID int NOT NULL AUTO_INCREMENT,
    FORUM_NAME VARCHAR(45),
    FORUM_ABOUT TEXT,
    FORUM_IMAGE VARCHAR(45),
    FORUM_IMAGE_BANNER VARCHAR(45),
    FORUM_DATE_CREATION TIMESTAMP,
    FORUM_RULES TEXT,
    USER_FORUM_ID VARCHAR(45),
    PRIMARY KEY(FORUM_ID),
    FOREIGN KEY(USER_FORUM_ID) REFERENCES USER_FORUM(USER_FORUM_ID)
);

CREATE TABLE POST(
    POST_ID int NOT NULL AUTO_INCREMENT,
    POST_TITLE VARCHAR(45),
    POST_CONTENT TEXT,
    POST_IMAGE VARCHAR(45),
    POST_UPVOTE INT,
    POST_UPVOTE_COUNT INT,
    POST_DOWNVOTE_COUNT INT,
    POST_VALUE INT,
    USER_FORUM_ID VARCHAR(45),
    FORUM_ID INT,
    PRIMARY KEY(POST_ID),
    FOREIGN KEY(USER_FORUM_ID) REFERENCES USER_FORUM(USER_FORUM_ID),
    FOREIGN KEY(FORUM_ID) REFERENCES FORUM(FORUM_ID)
);

CREATE TABLE COMMENT(
    COMMENT_ID int NOT NULL AUTO_INCREMENT,
    COMMENT_TEXT TEXT,
    COMMENT_IMAGE VARCHAR(45),
    POST_ID INT,
    USER_FORUM_ID VARCHAR(45),
    PRIMARY KEY(COMMENT_ID),
    FOREIGN KEY(POST_ID) REFERENCES POST(POST_ID),
    FOREIGN KEY(USER_FORUM_ID) REFERENCES USER_FORUM(USER_FORUM_ID)
);

CREATE TABLE USER_FORUM_REPORT(
    USER_FORUM_REPORT_ID int NOT NULL AUTO_INCREMENT,
    USER_FORUM_REPORT_CONTENT TEXT,
    POST_ID INT,
    USER_FORUM_ID VARCHAR(45),
    ADMIN_ID VARCHAR(45),
    PRIMARY KEY(USER_FORUM_REPORT_ID),
    FOREIGN KEY(POST_ID) REFERENCES POST(POST_ID),
    FOREIGN KEY(USER_FORUM_ID) REFERENCES USER_FORUM(USER_FORUM_ID),
    FOREIGN KEY(ADMIN_ID) REFERENCES ADMIN(ADMIN_ID)
);

CREATE TABLE POST_UPVOTE_DOWNVOTE(
    USER_FORUM_ID VARCHAR(45),
    POST_ID INT,
    UPVOTE_STATUS BOOLEAN,
    PRIMARY KEY(USER_FORUM_ID,POST_ID),
    FOREIGN KEY(USER_FORUM_ID) REFERENCES USER_FORUM(USER_FORUM_ID),
    FOREIGN KEY(POST_ID) REFERENCES POST(POST_ID)
);

CREATE TABLE SUBSCRIPTION(
    USER_FORUM_ID VARCHAR(45),
    FORUM_ID INT,
    PRIMARY KEY(USER_FORUM_ID,FORUM_ID),
    FOREIGN KEY(USER_FORUM_ID) REFERENCES USER_FORUM(USER_FORUM_ID),
    FOREIGN KEY(FORUM_ID) REFERENCES FORUM(FORUM_ID)
);

CREATE TRIGGER UPVOTE_COUNT_CAL
AFTER INSERT ON POST_UPVOTE_DOWNVOTE
FOR EACH ROW 
UPDATE POST SET POST_UPVOTE_COUNT = (SELECT count(UPVOTE_STATUS)
FROM POST_UPVOTE_DOWNVOTE WHERE UPVOTE_STATUS = 1
GROUP BY POST_ID);


CREATE TRIGGER DOWNVOTE_COUNT_CAL
AFTER INSERT ON POST_UPVOTE_DOWNVOTE
FOR EACH ROW 
UPDATE POST SET POST_DOWNVOTE_COUNT = (SELECT count(UPVOTE_STATUS)
FROM POST_UPVOTE_DOWNVOTE WHERE UPVOTE_STATUS = 0
GROUP BY POST_ID);

CREATE TRIGGER VALUE_COUNT
AFTER UPDATE
ON POST FOR EACH ROW 
UPDATE POST SET POST_VALUE = (SELECT POST_UPVOTE_COUNT FROM POST GROUP BY POST_ID) - (SELECT POST_DOWNVOTE_COUNT FROM POST GROUP BY POST_ID)

